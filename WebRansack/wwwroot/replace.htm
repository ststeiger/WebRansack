<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />


    <title>Search and Replace</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=1.00, maximum-scale=1.00" />

    <style type="text/css">
        * {
            cursor: default !important;
        }

        html, body {
            margin: 0px;
            padding: 0px;
            width: 100%;
            height: 100%;
        }
        
    </style>

    <!--<link rel="shortcut icon" type="image/png" href="../favicon.png" />-->
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.ico" />

    <!--
    <link href="leaflet/leaflet.css" rel="stylesheet" type="text/css" />
    -->
    <script type="text/javascript" src="ts/Highlighter/Highlight.js?v=1" charset="utf-8"></script>

</head>
<body>
    
    <!--
    <script src="dump/polyfills/classList.js?v=1"></script>
    <script src="dump/polyfills/object-setprototypeof-ie9.js?v=1"></script>
    <script src="dump/polyfills/es6-promise-2.0.0.min.js?v=1"></script>
    <script src="dump/polyfills/fetch.js?v=1"></script>
    -->

    <fieldset>
        <legend>Main:</legend>

        <label class="lbl" for="txtFileName">File name</label>
        <input class="txt" id="txtFileName" type="text" value="*.rdl" />

        <!--
    <input class="txt" id="txtFileName" type="text" value="*.cs" />
    -->

        <br /><br />
        <label class="lbl" for="txtContainingText">Text to replace</label>
        <input class="txt" id="txtContainingText" type="text" value="Portfolio 1" />
        <br /><br />
        <label class="lbl" for="txtReplacementText">Replacement text</label>
        <input class="txt" id="txtReplacementText" type="text" value="Teilportfolio" />
        <br /><br />
        <label class="lbl" for="txtLookIn">Look in</label>
        <!--
    <input class="txt" id="txtLookIn" type="text" value="D:\username\Documents\Visual Studio 2017\TFS\COR-Basic\COR-Basic\Basic\Basic" />
    <input class="txt" id="txtLookIn" type="text" value="/root/github/RedmineMailService" />
    <input class="txt" id="txtLookIn" type="text" value="C:\Users\Administrator\Documents\Visual Studio 2017\Projects\Be.HexEditor" />
    -->
        <input class="txt" id="txtLookIn" type="text" value="D:\username\Documents\Visual Studio 2017\TFS\SQLReporting_VS2008\StadtZuerich\Immo\Reports_STZH\Reports_STZH" />

        <br /><br />
        <label class="lbl" for="cbSubfolders">Subfolders</label>
        <input id="cbSubfolders" type="checkbox" checked="checked" />

        <br /><br />

        <input type="button" value="Start" onclick="startSearch()" />
        <input type="button" value="Stop" />

    </fieldset>

    <div style="clear: both;"></div>

    <label for="clock" style="padding: 0.25cm;">Time elapsed:</label>
    <div id="clock" style="display: inline; padding: 0.25cm;"></div>
    <div style="clear: both;"></div>
    <br />

    <div id="divResults" style="padding: 0.25cm;"></div>

  
    <script type="text/javascript">
        
        if (!String.prototype.startsWith)
        {
            String.prototype.startsWith = function (search, pos)
            {
                return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
            };
        }


        function wsUrl(urlPart)
        {
            // let exampleSocket = new WebSocket("ws://localhost:57794/ransack"); //, "protocolOne");
            let url = document.location.protocol.toLowerCase().startsWith("https")
                ? "wss" : "ws";
            url += "://" + document.location.host;

            if (!urlPart.startsWith("/"))
                url += "/";

            url += urlPart;

            // console.log(url);
            return url;
        } // End Function wsUrl 


        function example()
        {
            let exampleSocket = new WebSocket(wsUrl("ws")); //, "protocolOne");

            exampleSocket.onmessage = function (event)
            {
                console.log("onmessage", event);
                console.log(event.data);

                // exampleSocket.close();
            };

            exampleSocket.onopen = function (event)
            {
                exampleSocket.send("Here's some text that the server is urgently awaiting for !");
            };
        } // End Function example 


        function thousandSeparator(x)
        {
            if (x == null)
                return "";

            let s = x.toString();
            let i = s.indexOf(".");
            let comma = "";

            if (i != -1)
            {
                comma = s.substr(i);
                s = s.substr(0, i);
            }

            s = s.replace(/\B(?=(\d{3})+(?!\d))/g, "'");
            s += comma;

            return s;
        } // End Function thousandSeparator 
        
        
        function startClock()
        {
            let clockElement = document.getElementById("clock");
            let startTime = new Date();
            // console.log("tick");
            
            let clock = window.setInterval(
                function ()
                {
                    // console.log("tack");
                    let elapsed = Math.round(((new Date()).getTime() - startTime.getTime())/1000.0);

                    clockElement.innerHTML = "";
                    clockElement.appendChild(
                        document.createTextNode(elapsed)
                    );

                }, 1000
            );
            
            return clock;
        } // End Function startClock
        
        
        
        function startSearch()
        {
            // if ("WebSocket" in window) alert("WebSocket is supported by your Browser!");
            
            
            let totalResults = [];
            let exampleSocket = new WebSocket(wsUrl("sar")); //, "protocolOne");
            let table = document.createElement("table");
            let divResults = document.getElementById("divResults");
            divResults.innerHTML = "";
            divResults.appendChild(table);
            
            let clock = startClock();
            
            window.onbeforeunload = function() {
                exampleSocket.onclose = function () {}; // disable onclose handler first
                exampleSocket.close();
            };

            exampleSocket.onerror = function(event) {
                console.error("WebSocket error observed:", event);
            };
            
            
            exampleSocket.onclose = function(event) {
                console.log('Web Socket Connection Closed');
                window.clearInterval(clock);
                console.log(event);
                // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
                
                // event.code 
                // event.reason
                // event.wasClean
                // event.timeStamp
                
                let info = document.createElement("div");
                info.appendChild(
                    document.createTextNode("Total Results: " + thousandSeparator(totalResults.length))
                );
                
                // divResults.appendChild(info);
                divResults.insertBefore(info, divResults.firstChild);
            };
            
            exampleSocket.onmessage = function (event)
            {
                console.log("onmessage", event);
                // console.log(event.data);
                
                let fs = JSON.parse(event.data);
                Array.prototype.push.apply(totalResults, fs);
                
                let containingText = document.getElementById("txtContainingText");
                let highlighter = new SearchTools.InstantSearch(document.body, [
                    {
                        token: containingText.value,
                        className: "highlight",
                        sensitiveSearch: false
                    }
                ]);
                
                for (let i = 0; i < fs.length; ++i)
                {
                    let tr = document.createElement("tr");

                    let td = document.createElement("td");
                    td.appendChild(
                        document.createTextNode(fs[i].File + ":" + fs[i].LineNumber)
                    );
                    tr.appendChild(td);

                    let td2 = document.createElement("td");
                    td2.appendChild(
                        document.createTextNode(fs[i].Line)
                    );
                    tr.appendChild(td2);
                    highlighter.highlightNode(td2);

                    table.appendChild(tr);
                }
                
                // exampleSocket.close();
                // console.log("closed");
            };

            exampleSocket.onopen = function (event)
            {
                let fileName = document.getElementById("txtFileName");
                let containingText = document.getElementById("txtContainingText");
                let replacementText = document.getElementById("txtReplacementText");
                let lookIn = document.getElementById("txtLookIn");
                let subfolders = document.getElementById("cbSubfolders");
                

                let searchSettings = {
                      "FileName": fileName.value
                    , "ContainingText": containingText.value
                    , "ReplacementText": replacementText.value
                    , "LookIn": lookIn.value
                    , "Subfolders": (subfolders.value == "checked")
                };
                
                console.log("searchSettings:", searchSettings);
                exampleSocket.send( JSON.stringify(searchSettings) );
            };
        } // End function startSearch 
        
        
    </script>
    
    <style type="text/css" media="all">
        .csbKey, .csbValue {
            font-family: Verdana;
            font-size: 8pt;
        }


        fieldset {
            margin: 0.25cm;
            padding: 0.25cm;
            float: left;
            border: 1px solid #E6E6E6;
        }

        .lbl {
            display: inline-block;
            width: 120px;
        }

        .txt {
            display: inline-block;
            width: 15cm;
        }

        tr:nth-child(2n+1) {
            background-color: whitesmoke;
        }
        
        
        tr td{
            height: auto;
            overflow-wrap: break-word;
        }
        
        
        td:nth-child(1)
        {
            max-width: 500px;
        }


        body{
            overflow-y: scroll;
        }
        
        td:nth-child(2)
        {
            max-width: calc(100vw - 500px - 1.25cm);
        }
        
        .highlight {
            background-color: yellow;
        }

        input {
            padding: 0.1cm;
            padding-left: 0.25cm;
            padding-right: 0.25cm;
            font-size: 3.5mm;
        }

    </style>
    
</body>
</html>
