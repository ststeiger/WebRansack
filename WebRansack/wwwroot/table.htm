<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />


    <title>Result Table</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=1.00, maximum-scale=1.00" />

    <style type="text/css">
        * {
            cursor: default !important;
        }

        html, body {
            margin: 0px;
            padding: 0px;
            width: 100%;
            height: 100%;
        }
        
    </style>

    <!--<link rel="shortcut icon" type="image/png" href="../favicon.png" />-->
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.ico" />

    <!--
    <link href="leaflet/leaflet.css" rel="stylesheet" type="text/css" />
    -->
    <script type="text/javascript" src="ts/Highlighter/Highlight.js?v=1" charset="utf-8"></script>

</head>
<body>

    <div id="divResults" style="padding: 0.25cm;"></div>
    
    
    <script type="text/javascript">
        
        if (!String.prototype.startsWith)
        {
            String.prototype.startsWith = function (search, pos)
            {
                return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
            };
        }

        if (!String.prototype.endsWith)
        {
            String.prototype.endsWith = function (search, this_len)
            {
                if (this_len === undefined || this_len > this.length)
                {
                    this_len = this.length;
                }
                return this.substring(this_len - search.length, this_len) === search;
            };
        }

        String.prototype.replaceAt = function (index, replacement)
        {
            return this.substr(0, index) + replacement + this.substr(index + replacement.length);
        }

        function wsUrl(urlPart)
        {
            // let exampleSocket = new WebSocket("ws://localhost:57794/ransack"); //, "protocolOne");
            let url = document.location.protocol.toLowerCase().startsWith("https")
                ? "wss" : "ws";
            url += "://" + document.location.host;

            if (!urlPart.startsWith("/"))
                url += "/";

            url += urlPart;

            // console.log(url);
            return url;
        } // End Function wsUrl 


        function isJson(str)
        {
            try
            {
                JSON.parse(str);
            } catch (e)
            {
                return false;
            }
            return true;
        }



        function outputData(data)
        {
            // console.log("preData", data);

            if (data.startsWith(","))
                data.replaceAt(0, "[")
            
            if (!data.startsWith("["))
                data = "[" + data;

            if (!data.endsWith("]"))
                data = data + "]";


            // console.log("postData", data);


            var p = null;

            try
            {
                p = JSON.parse(data);
            }
            catch (ex)
            {
                console.log("ex", ex);
                console.log("dataaah!", data);
                debugger;
                return;
            }



            if (!Array.isArray(p))
                return;

            /*
            for (var i = 0, len = p.length; i < len; ++i)
            {
                console.log(p[i]);
                
                for (var key in p[i])
                {
                    if (p[i].hasOwnProperty(key))
                    {
                        console.log(key + " -> " + p[i][key]);
                    } // End if (p[i].hasOwnProperty(key)) 
                } // Next key 
                
                for (const [key, value] of Object.entries(p[i]))
                {
                    // console.log(key, value);
                    console.log(`${key}: ${value}`);
                }  // Next [key, value] 

            } // Next i 
            */
            
            


            
            

        }




        function example()
        {
            let exampleSocket = new WebSocket(wsUrl("table")); //, "protocolOne");

            window.onbeforeunload = function ()
            {
                exampleSocket.onclose = function () { }; // disable onclose handler first
                exampleSocket.close();
            };

            exampleSocket.onmessage = function (event)
            {
                console.log("onmessage", event);
                // console.log("ed", event.data);

                try
                {
                    outputData(event.data);
                }
                catch (ex)
                {
                    console.log(ex.message, event.data);
                }
                
                


                // JSON.parse(event.data);

                // exampleSocket.close();
            };

            exampleSocket.onopen = function (event)
            {
                // var searchSettings = {};
                // exampleSocket.send(JSON.stringify(searchSettings));
                exampleSocket.send("Here's some text that the server is urgently awaiting for !");
            };


            exampleSocket.onerror = function (event)
            {
                console.error("WebSocket error observed:", event);
            };

            exampleSocket.onclose = function (event)
            {
                console.log('Web Socket Connection Closed');
                // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
                console.log(event);
                                // event.code 
                // event.reason
                // event.wasClean
                // event.timeStamp
            };

        } // End Function example 

        example();
        
    </script>
    
    <style type="text/css" media="all">
        .csbKey, .csbValue {
            font-family: Verdana;
            font-size: 8pt;
        }


        fieldset {
            margin: 0.25cm;
            padding: 0.25cm;
            float: left;
            border: 1px solid #E6E6E6;
        }

        .lbl {
            display: inline-block;
            width: 120px;
        }

        .txt {
            display: inline-block;
            width: 15cm;
        }

        tr:nth-child(2n+1) {
            background-color: whitesmoke;
        }
        
        
        tr td{
            height: auto;
            overflow-wrap: break-word;
        }
        
        
        td:nth-child(1)
        {
            max-width: 500px;
        }


        body{
            overflow-y: scroll;
        }
        
        td:nth-child(2)
        {
            max-width: calc(100vw - 500px - 1.25cm);
        }
        
        .highlight {
            background-color: yellow;
        }

        input {
            padding: 0.1cm;
            padding-left: 0.25cm;
            padding-right: 0.25cm;
            font-size: 3.5mm;
        }

    </style>
    
</body>
</html>
